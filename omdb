#!/usr/bin/env python3
import argparse
import os
import sys
import webbrowser

import requests
from dotenv import load_dotenv

load_dotenv()
OMDB_KEY = os.environ.get("OMDB_KEY")


def main() -> int:
    if not OMDB_KEY:
        print(
            ":: OMDB_KEY not found. "
            "Please set the OMDB_KEY environment variable "
            "to your OMDB api key.",
            file=sys.stderr,
        )
        return 1
    parser = argparse.ArgumentParser(
        description="Get information about a movie/tv-show."
    )
    parser.add_argument("name", help="Name of the movie/tv-show.")
    parser.add_argument(
        "-k",
        "--keys",
        nargs="+",
        default=[],
        help="Highlight rows with the following keys.",
    )
    parser.add_argument(
        "-o",
        "--open",
        action="store_true",
        help="Open IMDB link in the browser.",
    )
    parser.add_argument(
        "-t",
        "--type",
        dest="type_",
        choices=("tv", "movie"),
        help="Type of result to fetch.",
    )
    parser.add_argument(
        "-p",
        "--save-poster",
        action="store_true",
        help="Save the poster image to a JPEG file.",
    )
    args = parser.parse_args()
    if args.keys:
        args.keys = [key.lower() for key in args.keys]

    movie_name = args.name
    movie_name = "+".join(movie_name.split())
    endpoint = f"http://omdbapi.com/?apikey={OMDB_KEY}&t={movie_name}"
    if args.type_:
        if args.type_ == "tv":
            args.type_ = "series"
        endpoint += f"&type={args.type_}"

    response = requests.get(endpoint)
    try:
        response.raise_for_status()
    except requests.exceptions.HTTPError:
        print(f":: Invalid API key: {OMDB_KEY}", file=sys.stderr)
        return 2

    imdb_id = None
    poster_url = None
    for key, val in response.json().items():
        if key == "imdbID":
            imdb_id = val
        if key == "Ratings":
            val = ", ".join([f"{r['Source']}: {r['Value']}" for r in val])
        if key.lower() in args.keys:
            if sys.stdout.isatty():
                print(f"\033[45;1m{key:<12}: {val}\033[0m")
            else:
                print(f"{key:<12}: {val}")
        else:
            if sys.stdout.isatty():
                print(f"\033[1m{key:<12}: \033[35m{val}\033[0m")
            else:
                print(f"{key:<12}: {val}")
        if key == "Poster":
            poster_url = val

    if args.save_poster:
        poster_filename = args.name.replace(" ", "_") + "_poster.jpg"
        print(f"\n:: Saving poster to file {poster_filename!r}")
        with open(poster_filename, "wb") as f:
            response = requests.get(poster_url)
            response.raise_for_status()
            f.write(response.content)

    if args.open:
        if imdb_id:
            print("\n:: Opening IMDB page in default browser.")
            webbrowser.open(f"https://www.imdb.com/title/{imdb_id}")
        else:
            print("\n:: IMDB Link not available.", file=sys.stderr)
    return 0


if __name__ == "__main__":
    exit(main())
