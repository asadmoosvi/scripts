#!/usr/bin/env python3
import shlex
import shutil
import subprocess
import sys
from urllib.parse import quote

import click


@click.command()
@click.help_option("-h", "-?", "--help")
@click.argument("query", nargs=-1, required=False)
@click.option(
    "-y",
    "--youtube",
    "website",
    flag_value="youtube",
    help="Search on youtube.",
)
@click.option(
    "-d",
    "--duckduckgo",
    "website",
    flag_value="duckduckgo",
    help="Search on duckduckgo.",
)
@click.option(
    "-r",
    "--reddit",
    "website",
    flag_value="reddit",
    help="Search on reddit.",
)
@click.option(
    "-g",
    "--github",
    "website",
    flag_value="github",
    help="Search on github.",
)
@click.option(
    "-p",
    "--piratebay",
    "website",
    flag_value="piratebay",
    help="Search on piratebay.",
)
@click.option(
    "-c",
    "--chatgpt",
    "website",
    flag_value="chatgpt",
    help="Search on chatgpt.",
)
@click.option(
    "-x",
    "--perplexity",
    "website",
    flag_value="perplexity",
    help="Search on perplexity.ai (AI search engine)",
)
@click.option(
    "-a",
    "--aimode",
    "website",
    flag_value="aimode",
    help="Search on Google AI Mode.",
)
@click.option(
    "-i",
    "--incognito",
    is_flag=True,
    help="Use incognito mode when searching.",
)
def main(query: str, website: str, incognito: bool) -> None:
    """Search for a query on a website and open the results in a browser.

    The default search website is Google. Queries are combined into a single string.
    If no queries are provided, a text editor will open to input the query,
    which will then be passed to the website.
    """
    chrome_path = shutil.which("google-chrome") or shutil.which("google-chrome-stable")
    firefox_path = shutil.which("firefox")

    if incognito:
        if chrome_path:
            chrome_path += " --incognito"
        if firefox_path:
            firefox_path += " --private-window"

    # prefer using chrome, otherwise firefox
    browser_path = chrome_path or firefox_path
    if browser_path and chrome_path:
        # add touchpad navigation (for linux)
        # allows 2 finger history navigation like how it works on windows
        browser_path += " --enable-features=TouchpadOverscrollHistoryNavigation"

    if browser_path is None:
        click.echo("==> ERROR: chrome or firefox not found on this system.", err=True)
        click.echo("==> Aborting...", err=True)
        sys.exit(1)

    websites = dict(
        youtube="https://www.youtube.com/results?search_query={}",
        google="https://www.google.com/search?q={}",
        reddit="https://www.reddit.com/search?q={}",
        github="https://www.github.com/search?q={}",
        duckduckgo="https://www.duckduckgo.com?q={}",
        piratebay="https://thepiratebay0.org/search/{}/1/99/0",
        chatgpt="https://chatgpt.com/?q={}",
        perplexity="https://perplexity.ai/search?q={}",
        aimode="https://www.google.com/search?udm=50&q={}",
    )

    if website is None:
        # default website to search is google
        website = "google"

    add_newline = False
    if not query:
        # confirm before opening a text editor
        click.confirm(
            "Open default text editor to input query?",
            prompt_suffix=" ",
            default=True,
            abort=True,
            err=True,
        )

        edited_text = click.edit()
        if not edited_text:
            click.secho(
                "error: did not receive any text from the editor. did you make sure to save?",
                err=True,
                fg="red",
            )
            sys.exit(1)
        readable_query = edited_text.strip()
        add_newline = True

    else:
        readable_query = " ".join(q for q in query)

    query = quote(readable_query)

    url = websites[website].format(query)
    click.echo(f"{'\n' if add_newline else ''}Query\n-----\n{readable_query}")
    click.echo(f"\n==> Website: {website!r}")
    click.echo(f"==> Incognito mode: {'on' if incognito else 'off'}")

    cmd = shlex.split(browser_path) + [url]
    subprocess.Popen(cmd, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)


if __name__ == "__main__":
    main()
