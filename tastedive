#!/usr/bin/env python3

import os
import sys
import webbrowser
from typing import Dict, List

import click
import requests
from dotenv import load_dotenv

load_dotenv()
TASTEDIVE_KEY = os.getenv("TASTEDIVE_KEY")
OMDB_KEY = os.getenv("OMDB_KEY")


def die(msg: str) -> None:
    click.echo(f"ERROR: {msg}", err=True)
    sys.exit(1)


def info(msg: str) -> None:
    click.echo(f"===> {msg}", err=True)


def fetch_results(query: str, _type: str, limit: int) -> List[Dict]:
    if TASTEDIVE_KEY is None:
        die("TASTEDIVE_KEY env variable not found.")
    else:
        info(f"Searching for similar {_type} to {query!r} ...")
        info(f"Limit: {limit}")
        click.echo()

    query = "+".join(query.split())
    endpoint_url = (
        "https://tastedive.com/api/similar?"
        "q={query}"
        "&type={_type}"
        "&limit={limit}"
        "&k={TASTEDIVE_KEY}"
    )

    response = requests.get(
        endpoint_url.format(
            query=query, _type=_type, limit=limit, TASTEDIVE_KEY=TASTEDIVE_KEY
        )
    )
    response.raise_for_status()
    return response.json()["Similar"]["Results"]


@click.command(help="Find similar movies/shows using the Tastedive API.")
@click.option("-m", "--movie", help="Movie query.")
@click.option("-t", "--tv", help="TV show query.")
@click.option(
    "-r", "--rating", default=0.0, help="Filter results by minimum rating."
)
@click.option(
    "-l",
    "--limit",
    default=10,
    show_default=True,
    help="Number of results to show.",
)
@click.option(
    "-o",
    "--open",
    "imdb_open",
    is_flag=True,
    help="Open IMDb links in browser.",
)
@click.help_option("-h", "--help")
def main(
    movie: str, tv: str, limit: int, imdb_open: bool, rating: int
) -> None:
    if movie is not None:
        query = movie
        _type = "movies"
    elif tv is not None:
        query = tv
        _type = "shows"
    else:
        die(
            "No input received.\n"
            "Search for movies with `-m` or shows with `-t`.\n"
            "Run `--help` for more info."
        )

    results = fetch_results(query, _type, limit)

    if OMDB_KEY is None:
        info(
            "OMDB_KEY env variable not found."
            " Please set it to fetch IMDB info."
        )
        click.echo("\nBasic Results:\n")
        for idx, result in enumerate(results):
            click.echo(f"{idx+1:<2})    {result['Type']:<10}{result['Name']}")
    else:
        endpoint_url = (
            "http://www.omdbapi.com/?"
            "apikey={OMDB_KEY}"
            "&t={title}"
            "&type={imdb_type}"
        )
        if _type == "movies":
            imdb_type = "movie"
        elif _type == "shows":
            imdb_type = "series"

        movie_results = list()
        for idx, result in enumerate(results, 1):
            title = "+".join(result["Name"].split())
            omdb_url = endpoint_url.format(
                OMDB_KEY=OMDB_KEY,
                title=title,
                imdb_type=imdb_type,
            )
            response = requests.get(omdb_url)
            response.raise_for_status()
            json_response = response.json()
            try:
                imdb_link = f"https://imdb.com/title/{json_response['imdbID']}"
                movie_title = json_response['Title']
                info(f'{idx}. Found title {movie_title!r}')
                movie_rating = float(json_response['imdbRating'])
                if movie_rating > rating:
                    movie_results.append(
                        dict(
                            title=movie_title,
                            year=json_response['Year'],
                            rated=json_response['Rated'],
                            genre=json_response['Genre'],
                            rating=movie_rating,
                            votes=json_response['imdbVotes'],
                            link=imdb_link,
                        )
                    )
            except KeyError:
                info(f'{idx}. [WARNING] Unknown IMDb title: {title!r}')
        # sort results by rating
        click.echo()
        info(
            'Applying filters and sorting results by rating (lowest first) ...'
        )
        movie_results = sorted(
            movie_results,
            key=lambda movie: float(movie['rating']),
        )

        if not movie_results:
            info('No results found.')
            return
        else:
            info(f'{len(movie_results)} results found.\n')

        for idx, movie_result in enumerate(movie_results, 1):
            click.echo(f'[{idx}]')
            click.echo(f'    Title     : {movie_result["title"]}')
            click.echo(f'    Year      : {movie_result["year"]}')
            click.echo(f'    Rated     : {movie_result["rated"]}')
            click.echo(f'    Genre     : {movie_result["genre"]}')
            click.echo(f'    Rating    : {movie_result["rating"]}')
            click.echo(f'    Votes     : {movie_result["votes"]}')
            click.echo(f'    IMDb Link : {movie_result["link"]}')
            if imdb_open:
                click.echo()
                info(f"Opening IMDb link for `{movie_result['title']}`")
                webbrowser.open(movie_result['link'])
            click.echo()


if __name__ == "__main__":
    main()
